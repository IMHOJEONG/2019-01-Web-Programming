ajax를 구현하는 여러가지 기술이 존재 => 최신 기술인 fetch API를 사용할 것 
=> 더 유연하고, 분명함.

fetch('css').then(function(response){
            response.text().then(function(text){
                alert(text); // 이게 호출되도록 함 => text 안에 서버가 응답한 데이터가 들어가 있다.
            })
        })
=> 원리를 알면 좋겠지만, 몰라도 사용가능하다. 

=> 사용법 먼저 => 자유도가 떨어짐 => 그 때 원리를 이해해보자.

client와 server가 있어 서로 통신할 때, client가 요청함 => 웹 브라우저야 자바스크립트 파일을 
응답해줘(fetch('javascript'))

 // fetch('html');
            // fetch 함수 - 첫 번째 인자로 온 것을 서버로 요청함 
            // 적당한 데이터를 꺼내주어서 응답해야 하는데, 많은 시간이 걸린다고 하면,
            // 서버가 응답할 때까지 다른일을 하게 하는 것 

        function callbackme(){
            console.log('response end');
        }    

        // Asynschronous - 비동기
        fetch('html').then(callbackme); 
            // fetch api야 응답이 끝나면 callbackme 함수를 실행시켜줘    
        console.log(1);
        console.log(2);
            // then을 통해 callbackme 함수 요청 후 
            // 1,2 출력 후 웹 브라우저가 응답받는 거 끝나면 callbackme값 호출됨 
   

// fetch 함수 - 첫 번째 인자로 온 것을 서버로 요청함 


 // function callbackme(){
        //     console.log('response end');
        // }    밑과 같은 의미

        callbackme = function(){
            console.log('response end');
        }

//fetch('html').then(callbackme); - 같은 의미
        fetch('html').then(function(){
            console.log('response end');
        }); => 하지만 

 fetch('html').then(function(response){
            console.log(response);
        }); => 설명서에 response 객체를 입력 매개변수로 받는다고 되어있어 
// response 객체 출력
// status 200 => 웹 서버와 웹 브라우저 간 통신 성공 
// status 404 => not found(파일이 없다)

fetch('html').then(function(response){
            console.log(response);
            console.log(response.status);
            if(response.status == '404')
            {
                alert('Not found')
            }
        }); 
// response 객체 - fetch를 통해 요청 시, 웹 서버가 응답한 데이터를 담고 있는 객체 
=> 그 안에는 여러 가지 속성을 가짐(귀중한 단서들)

우리의 ajax를 이용해서 리로드 없이 정보를 부분적으로 변경할 수 있게 되었습니
다만, 사용자가 자신이 보고 있는 정보를 다른 사람에게 공유할 수는 없게 되었습니다.
=> 그럼 어떻게?

1. 링크 순수한 상태로 활성화된다면?
 <!-- URL을 통해 접근하게 하는 것 => hash
    id는 약속! 세 번째 문단은 여기서 fragment, three를 fragment identifier  -->

    <!-- 다른 페이지를 로드해서 시작되는 페이지를 세팅할 수 있어
    how to get hash from url javascript 검색 ㄱㄱ
    -->
    <script>
        if (window.location.hash) { // window 생략 가능
            // location.hash가 #three를 가리킨다는 것을 알 수 있어
            // JavaScript String substring() Method 검색
            console.log(location.hash.substr(1));
            // Fragment exists
        } else {
            // Fragment doesn't exist
        }

href="#!javascript" // hashbang 이라고 한대

AJax => 검색엔진 최적화가 잘 안 돼 ㅠㅠㅠㅠㅠㅠ
=> 실제 내용이 백엔드에서 동적으로 가져와서 없음 => hashbang은 현 시점에서 쓰지 않고

pjax라는 기술을 현재는 많이 씀 => 새로운 기술이 아니라 배웠던 기술을 보완한 방식 


프로그래머들 => 데이터와 로직, 데이터와 애플리케이션을 구분한다. 

ex) li 태그가 데이터 => 바뀔 수 있는 데이터로서의 성격을 지님 
     
=> 분리를 하는데, application 입장에서 사용자의 임의 수정을 막을 수 있고
컨텐츠 입력하는 입장에서는 컨텐츠 입력을 어디다 해야하는가, 실수로 망가뜨리지 않을까로부터
자유로울 수 있다.
list를 웹으로 쪼개는 방법 
=> 보면 list 파일에도 중복이 많아 => html,css,javascipt 입력하는 것만으로 해결할 수 있을까?

역슬래쉬로 fetchPage(\' \')해서 문자열 내에서 사용가능

=> 굉장히 사소하지만 구현하는 것은 휠씬 더 어려울 수 있어

2018년 현재 fetch API는 비교적 최신 기능입니다. 따라서 아직 지원되지 않는 브라우저를 사용자가 사용하는 경우 동작하지 않을 수 있습니다. polypill을 이용하면 fetch API를 지원하지 않는 웹브라우저에서도 이용할 수 있습니다. 
지원되지 않는 브라우저에서 코드가 실행되면 polyfill 이 활성화되서 대신 동작

XMLHttpRequest => Fetch Api

https://caniuse.com/ => can i use 사이트 => 지원하는가?

웹 : 공공재 => 어떤 기능이 있을 때 모든 브라우저가 지원하지 않을 수 있어 
polyfill => 과거 브라우저도 사용할 수 있게 됨 => IE 11도 fetch api 쓸 수 있게 함






